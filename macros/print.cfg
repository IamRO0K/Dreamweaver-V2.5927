[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  #STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  #  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    #STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    #STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend : 150 C"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  #  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  #STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  #  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  #STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  #STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printing.."          # Displays info
  #STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  # G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  # G0 Z0.4                                          # Raises Z to 0.4
  # G91                                              # Incremental positioning 
  # G1 X100 E20 F1000                                # Purge line
  # G90                                              # Absolute position
  PRIMELINE
  
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 100, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                            ; wait for buffer to clear
    G92 E0                          ; zero the extruder
    G1 E-25.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    STATUS_PART_READY

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_minimum.y+5} F3600  ; park nozzle at front
    M107                                     ; turn off fan
           

    BED_MESH_CLEAR
    M117 Print Complete!
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    STATUS_HOMING
    G28
    STATUS_LEVELING
    M117 Performing QGL..
    QUAD_GANTRY_LEVEL
    G28
    BED_MESH_CLEAR
    PARK
    STATUS_READY
    RESTORE_GCODE_STATE NAME=STATE_G32

    
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT


[gcode_macro PRIMELINE]
gcode:
    # Base macro parameters
    {% set prime_line_length = params.LINE_LENGTH|default(45)|float %}
    {% set prime_line_purge_distance = params.PURGE_LENGTH|default(30)|float %}
    {% set prime_line_flowrate = params.FLOWRATE|default(10)|float %}
    {% set prime_line_height = params.LINE_HEIGHT|default(0.6)|float %}
    {% set prime_line_adaptive = params.ADAPTIVE_MODE|default(0)|int %}
    {% set prime_line_margin = params.LINE_MARGIN|default(5.0)|float %} # Used only in adaptive mode
    
    # If the SIZE parameter is defined and not a dummy placeholder, we use it to do the adaptive bed mesh logic
    {% set coordinatesFound = false %}
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
        {% set coordinatesFound = true %}
    {% elif printer.exclude_object is defined %}
        {% if printer.exclude_object.objects %}
            # Else if SIZE is not defined, we fallback to use the [exclude_object] tags
            # This method is derived from Kyleisah KAMP repository: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging)
            {% set eo_points = printer.exclude_object.objects|map(attribute='polygon')|sum(start=[]) %}
            {% set xMinSpec = eo_points|map(attribute=0)|min %}
            {% set yMinSpec = eo_points|map(attribute=1)|min %}
            {% set xMaxSpec = eo_points|map(attribute=0)|max %}
            {% set yMaxSpec = eo_points|map(attribute=1)|max %}
            {% set coordinatesFound = true %}
        {% endif %}
    {% endif %}

    # We get the default prime line position parameters
    {% set prime_line_x, prime_line_y = 5, 2.5|map('float') %}
    {% set prime_line_x = params.START_X|default(prime_line_x)|float %}
    {% set prime_line_y = params.START_Y|default(prime_line_y)|float %}
    {% set prime_line_direction = params.LINE_DIRECTION|default("X")|string|upper %}

    {% set center_x, center_y = [printer.toolhead.axis_maximum.x / 2, printer.toolhead.axis_maximum.y / 2]|map("float") %}
    
    # If first layer coordinates are retrieved and adaptive mode is enabled, then we replace the coordinates to
    # do an adaptive purge while being careful to have the line stay on the bed when the first layer
    # is in an opposite bed quadrant than the prime line initial coordinates (due to mirrored coordinates from center axes)...
    {% if coordinatesFound and prime_line_adaptive == 1 %}
        {% set prime_line_x = 2*center_x - prime_line_x if (prime_line_x > center_x and xMaxSpec < center_x) or (prime_line_x < center_x and xMinSpec > center_x) 
                               else prime_line_x %}
        {% set prime_line_y = 2*center_y - prime_line_y if (prime_line_y > center_y and yMaxSpec < center_y) or (prime_line_y < center_y and yMinSpec > center_y) 
                               else prime_line_y %}
        {% set prime_line_x = [[prime_line_x, xMinSpec - prime_line_margin]|max, xMaxSpec + prime_line_margin]|min %}
        {% set prime_line_y = [[prime_line_y, yMinSpec - prime_line_margin]|max, yMaxSpec + prime_line_margin]|min %}
    {% endif %}

    # Choose the way of printing the primeline (in + or -) alongside the direction to avoid going outside the bed boundaries
    {% set prime_line_way = -1 if (prime_line_direction == "X" and prime_line_x > center_x) or (prime_line_direction == "Y" and prime_line_y > center_y) else 1 %}

    {% set St = 350 * 60 %}
    {% set Sz = 15 * 60 %}
    {% set verbose = True %}

    {% set klippain_mmu_enabled = False %}
    {% set filament_sensor_enabled = False %}
    {% set re_enable_filament_sensor = 0 %}

    {% set max_extrude_cross_section = printer["configfile"].config["extruder"]["max_extrude_cross_section"]|float %}
    {% set filament_diameter = printer["configfile"].config["extruder"]["filament_diameter"]|float %}
    
    # We first compute the width of the prime line
    {% set purge_volume = prime_line_purge_distance * 3.14159 * (filament_diameter / 2)**2 %}
    {% set line_width = purge_volume / (prime_line_height * prime_line_length) %}

    # Then we check that the prime line cross section will not be problematic (exceeding Klipper max_extrude_cross_section)
    # or, if it's the case, we warn the user and add a correction to the length of filament to be purged
    {% if (prime_line_height * line_width) > max_extrude_cross_section %}
        {% if verbose %}
            {action_respond_info("The prime_line_purge_distance of %.4f mm is too high and will exceed the max_extrude_cross_section!" % prime_line_purge_distance)}
        {% endif %}
        {% set prime_line_purge_distance = 0.98 * (max_extrude_cross_section * prime_line_length) / (3.14159 * (filament_diameter / 2)**2) %}
        {% set purge_volume = prime_line_purge_distance * 3.14159 * (filament_diameter / 2)**2 %}
        {% set line_width = purge_volume / (prime_line_height * prime_line_length) %}
        {% if verbose %}
            {action_respond_info("Klippain corrected the prime_line_purge_distance to %.4f mm" % prime_line_purge_distance)}
        {% endif %}
    {% endif %}

    # We then compute the height to width ratio and validate that the prime line will not be too thin
    {% if (prime_line_height / line_width) >= 0.5 %} # TODO: validate this 1/2 ratio is good for all
        {action_raise_error("The prime line will be too thin and will probably not stick properly to the bed. Increase its purge distance or decrease its length!")}
    {% endif %}

    # Finally we compute the speed to get the correct flowrate for the prime line
    {% set speed = (prime_line_flowrate / (prime_line_height * line_width)) * 60 |float %}

    {% if klippain_mmu_enabled %}
        _KLIPPAIN_MMU_SET_CLOGDETECTION STATE=0
    {% endif %}

    {% if filament_sensor_enabled %}
        {% if (printer['filament_motion_sensor runout_sensor'] is defined and printer['filament_motion_sensor runout_sensor'].enabled) or (printer['filament_switch_sensor runout_sensor'] is defined and printer['filament_switch_sensor runout_sensor'].enabled) %}
            SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
            {% set re_enable_filament_sensor = 1 %}
        {% endif %}
    {% endif %}

    G91
    M83
    {% if (printer.toolhead.position.z < 5) %}
        G1 Z5 F{Sz}
    {% endif %}

    # Starting position
    G90
    G0 X{prime_line_x} Y{prime_line_y} F{St}
    G1 Z{prime_line_height} F{Sz|int / 2}

    # Add pressure in the nozzle
    G92 E0
    G1 E18 F300

    # Prime line
    G92 E0
    {% if prime_line_direction == "X" %}
        G1 X{prime_line_x + prime_line_way*prime_line_length} E{prime_line_purge_distance} F{speed}
    {% elif prime_line_direction == "Y" %}
        G1 Y{prime_line_y + prime_line_way*prime_line_length} E{prime_line_purge_distance} F{speed}
    {% else %}
        { action_respond_error("Prime line direction is not valid. Choose either X or Y in the variables.cfg file!") }
    {% endif %}

    # Retract and Z-hop
    G92 E0
    G1 E-0.2 F2100
    G92 E0
    G1 Z3 F{Sz}

    # Additional small movement to get out of the line as some slicers directly emmit
    # a Z- move as a first step that make the toolhead crash back in the line and get dirty
    G91
    G1 X2 Y2 F{St}
    G90
    
    # Flushing Klipper's buffer to ensure the primeline sequence is done before continuing
    M400


